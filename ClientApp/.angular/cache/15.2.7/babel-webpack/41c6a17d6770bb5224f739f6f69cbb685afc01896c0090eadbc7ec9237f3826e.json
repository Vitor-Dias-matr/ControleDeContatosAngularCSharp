{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class ModalService {\n  constructor() {\n    this.menssagem = '';\n    this.modalConfirmEvent = new EventEmitter();\n    this.modalCancelEvent = new EventEmitter();\n  }\n  add(menssagem) {\n    this.menssagem = menssagem;\n  }\n  abrirModal(menssagem) {\n    this.menssagem = menssagem;\n  }\n  fecharModal() {\n    this.menssagem = '';\n  }\n  confirmar() {\n    this.modalConfirmEvent.emit();\n    this.fecharModal();\n  }\n  cancelar() {\n    this.modalCancelEvent.emit();\n    this.fecharModal();\n  }\n}\nModalService.ɵfac = function ModalService_Factory(t) {\n  return new (t || ModalService)();\n};\nModalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ModalService,\n  factory: ModalService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,YAAY,QAAQ,eAAe;;AAKxD,OAAM,MAAOC,YAAY;EAKvBC;IAJA,cAAS,GAAW,EAAE;IACtB,sBAAiB,GAAuB,IAAIF,YAAY,EAAQ;IAChE,qBAAgB,GAAuB,IAAIA,YAAY,EAAQ;EAE/C;EAEhBG,GAAG,CAACC,SAAiB;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC5B;EAEAC,UAAU,CAACD,SAAiB;IAC1B,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC5B;EAEAE,WAAW;IACT,IAAI,CAACF,SAAS,GAAG,EAAE;EACrB;EAEAG,SAAS;IACP,IAAI,CAACC,iBAAiB,CAACC,IAAI,EAAE;IAC7B,IAAI,CAACH,WAAW,EAAE;EACpB;EAEAI,QAAQ;IACN,IAAI,CAACC,gBAAgB,CAACF,IAAI,EAAE;IAC5B,IAAI,CAACH,WAAW,EAAE;EACpB;;AA3BWL,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAW,SAAZX,YAAY;EAAAY,YAFX;AAAM","names":["EventEmitter","ModalService","constructor","add","menssagem","abrirModal","fecharModal","confirmar","modalConfirmEvent","emit","cancelar","modalCancelEvent","factory","providedIn"],"sourceRoot":"","sources":["E:\\Workspaces\\AngularCSharp\\ControleDeContatosAngularCSharp\\ClientApp\\src\\app\\Services\\Menssagens\\Modal\\modal.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalService {\n  menssagem: string = '';\n  modalConfirmEvent: EventEmitter<void> = new EventEmitter<void>();\n  modalCancelEvent: EventEmitter<void> = new EventEmitter<void>();\n\n  constructor() { }\n\n  add(menssagem: string) {\n    this.menssagem = menssagem;\n  }\n\n  abrirModal(menssagem: string) {\n    this.menssagem = menssagem;\n  }\n\n  fecharModal() {\n    this.menssagem = '';\n  }\n\n  confirmar() {\n    this.modalConfirmEvent.emit();\n    this.fecharModal();\n  }\n\n  cancelar() {\n    this.modalCancelEvent.emit();\n    this.fecharModal();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}