{"ast":null,"code":"import _asyncToGenerator from \"E:/Workspaces/AngularCSharp/ControleDeContatosAngularCSharp/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nlet NewUsuarioComponent = class NewUsuarioComponent {\n  constructor(usuarioService) {\n    this.usuarioService = usuarioService;\n  }\n  ngOnInit() {\n    this.usuarioForm = new FormGroup({\n      id: new FormControl(''),\n      nome: new FormControl('', [Validators.required]),\n      login: new FormControl('', [Validators.required]),\n      email: new FormControl('', [Validators.required]),\n      perfil: new FormControl(''),\n      senha: new FormControl('', [Validators.required])\n    });\n  }\n  get nome() {\n    return this.usuarioForm.get('nome');\n  }\n  get login() {\n    return this.usuarioForm.get('login');\n  }\n  get email() {\n    return this.usuarioForm.get('email');\n  }\n  get perfil() {\n    return this.usuarioForm.get('perfil');\n  }\n  get senha() {\n    return this.usuarioForm.get('senha');\n  }\n  adicionar(usuario) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const formData = new FormData();\n      formData.append('nome', usuario.nome);\n      formData.append('login', usuario.login);\n      formData.append('email', usuario.email);\n      formData.append('senha', usuario.senha);\n      if (usuario.perfil) {\n        formData.append('perfil', usuario.perfil.toString());\n      }\n      yield _this.usuarioService.Adicionar(formData).subscribe();\n    })();\n  }\n  submit() {\n    if (this.usuarioForm.invalid) {\n      return;\n    }\n    this.adicionar(this.usuarioForm.value);\n    console.log(\"add\");\n    console.log(this.usuarioForm.value);\n  }\n};\nNewUsuarioComponent = __decorate([Component({\n  selector: 'app-new-usuario',\n  templateUrl: './new-usuario.component.html',\n  styleUrls: ['./new-usuario.component.css']\n})], NewUsuarioComponent);\nexport { NewUsuarioComponent };","map":{"version":3,"mappings":";;AAAA,SAASA,SAAS,QAAQ,eAAe;AAEzC,SAASC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AAU5D,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAG9BC,YAAoBC,cAAqC;IAArC,mBAAc,GAAdA,cAAc;EAA2B;EAE7DC,QAAQ;IACN,IAAI,CAACC,WAAW,GAAG,IAAIP,SAAS,CAAC;MAC/BQ,EAAE,EAAE,IAAIP,WAAW,CAAC,EAAE,CAAC;MACvBQ,IAAI,EAAE,IAAIR,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACQ,QAAQ,CAAC,CAAC;MAChDC,KAAK,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACQ,QAAQ,CAAC,CAAC;MACjDE,KAAK,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACQ,QAAQ,CAAC,CAAC;MACjDG,MAAM,EAAE,IAAIZ,WAAW,CAAC,EAAE,CAAC;MAC3Ba,KAAK,EAAE,IAAIb,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACQ,QAAQ,CAAC;KACjD,CAAC;EACJ;EAEA,IAAID,IAAI;IACN,OAAO,IAAI,CAACF,WAAW,CAACQ,GAAG,CAAC,MAAM,CAAE;EACtC;EACA,IAAIJ,KAAK;IACP,OAAO,IAAI,CAACJ,WAAW,CAACQ,GAAG,CAAC,OAAO,CAAE;EACvC;EACA,IAAIH,KAAK;IACP,OAAO,IAAI,CAACL,WAAW,CAACQ,GAAG,CAAC,OAAO,CAAE;EACvC;EACA,IAAIF,MAAM;IACR,OAAO,IAAI,CAACN,WAAW,CAACQ,GAAG,CAAC,QAAQ,CAAE;EACxC;EACA,IAAID,KAAK;IACP,OAAO,IAAI,CAACP,WAAW,CAACQ,GAAG,CAAC,OAAO,CAAE;EACvC;EAEMC,SAAS,CAACC,OAAgB;IAAA;IAAA;MAC9B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAE/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,OAAO,CAACR,IAAI,CAAC;MACrCS,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,OAAO,CAACN,KAAK,CAAC;MACvCO,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,OAAO,CAACL,KAAK,CAAC;MACvCM,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,OAAO,CAACH,KAAK,CAAC;MAEvC,IAAIG,OAAO,CAACJ,MAAM,EAAE;QAClBK,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEH,OAAO,CAACJ,MAAO,CAACQ,QAAQ,EAAE,CAAC;;MAGvD,MAAM,KAAI,CAAChB,cAAc,CAACiB,SAAS,CAACJ,QAAQ,CAAC,CAACK,SAAS,EAAE;IAAC;EAC5D;EAEAC,MAAM;IACJ,IAAI,IAAI,CAACjB,WAAW,CAACkB,OAAO,EAAE;MAC5B;;IAGF,IAAI,CAACT,SAAS,CAAC,IAAI,CAACT,WAAW,CAACmB,KAAK,CAAC;IACtCC,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;IAClBD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACrB,WAAW,CAACmB,KAAK,CAAC;EACrC;CACD;AAxDYvB,mBAAmB,eAL/BJ,SAAS,CAAC;EACT8B,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,GACW5B,mBAAmB,CAwD/B;SAxDYA,mBAAmB","names":["Component","FormGroup","FormControl","Validators","NewUsuarioComponent","constructor","usuarioService","ngOnInit","usuarioForm","id","nome","required","login","email","perfil","senha","get","adicionar","usuario","formData","FormData","append","toString","Adicionar","subscribe","submit","invalid","value","console","log","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\Workspaces\\AngularCSharp\\ControleDeContatosAngularCSharp\\ClientApp\\src\\app\\components\\pages\\usuario\\new-usuario\\new-usuario.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\n\r\nimport { Usuario } from 'src/app/Models/Usuario';\r\nimport { UsuarioServiceService } from '../../../../Services/Usuario/usuario-service.service';\r\n\n@Component({\n  selector: 'app-new-usuario',\n  templateUrl: './new-usuario.component.html',\n  styleUrls: ['./new-usuario.component.css']\n})\nexport class NewUsuarioComponent {\n  usuarioForm!: FormGroup;\n\n  constructor(private usuarioService: UsuarioServiceService) { }\n\n  ngOnInit(): void {\r\n    this.usuarioForm = new FormGroup({\r\n      id: new FormControl(''),\r\n      nome: new FormControl('', [Validators.required]),\r\n      login: new FormControl('', [Validators.required]),\r\n      email: new FormControl('', [Validators.required]),\r\n      perfil: new FormControl(''),\r\n      senha: new FormControl('', [Validators.required]),\r\n    });\r\n  }\n\n  get nome() {\n    return this.usuarioForm.get('nome')!;\r\n  }\n  get login() {\n    return this.usuarioForm.get('login')!;\r\n  }\n  get email() {\n    return this.usuarioForm.get('email')!;\r\n  }\n  get perfil() {\n    return this.usuarioForm.get('perfil')!;\r\n  }\n  get senha() {\n    return this.usuarioForm.get('senha')!;\r\n  }\n\n  async adicionar(usuario: Usuario) {\r\n    const formData = new FormData();\r\n\r\n    formData.append('nome', usuario.nome);\r\n    formData.append('login', usuario.login);\r\n    formData.append('email', usuario.email);\r\n    formData.append('senha', usuario.senha);\r\n\r\n    if (usuario.perfil) {\r\n      formData.append('perfil', usuario.perfil!.toString());\r\n    }\r\n\r\n    await this.usuarioService.Adicionar(formData).subscribe();\r\n  }\n\n  submit() {\n    if (this.usuarioForm.invalid) {\n      return;\r\n    }\n\n    this.adicionar(this.usuarioForm.value);\r\n    console.log(\"add\");\r\n    console.log(this.usuarioForm.value);\r\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}